
Ordered (by priority):
√ Fix Integers (no inference, only fix integers, they're broken)
    √ Common types interning
    √ Ctxt Macros
√ Calculate structure data layout
    √ Recursive Query Support
    √ Query Cycle Detection
    √ Adt Type IR overhaul
    √ LLVM Target and TargetMachine information
    √ Layout and ABI
    √ Don't generate IR on typecheck errors
      (make the ir_build(..) query return Result, as the build phase will be able to emit errs in the future)
    √ Make sure to check every item
      (wether it has a body or not, as an unused struct could still be cyclic)
√ Codegen
    √ Refactor Consts
    √ Parser Recovery and Tree-like AST Node ownership
- Directives (`#if`, `#include`, etc ...)
    - Implement basic (real) calling convention
    - `#c_call` for non-mangled names
    - propper Name mangling for clyde functions
    - Behavioural tests (and testing suite) to have some foundational test cases
    - Files and Imports -> Namespaces
- Complex Paths (Parsing + Resolving): `Path` will replace `Name` completely
    - Enums
- Generic Functions and Adts
    - Monomorphization
    - Nullabilties (Optional<T> modeled as T? and null == None)
    - Default initialization and Discriminats
- Methods
- Overloaded Functions
- Operator Overloading

Unodered (Ideas for implementations):
- Switch stmts using `if <expr> == {`
- Type Inference variables
    - enabling floating point types f32/f64
- Parser hardening (better error handling + recovery)
- Mutabilities (const/mutable variables, ptrs, etc ...)
- Complex Syntax Extensions 
    - Macros (calls to `#expand` fns in all sorts of places)
    - Nesting of Items (inner functions, structures, etc)
    - `#if` in Items, at source scope, etc
    - Type alliases, new syntax for consts (maybe parsing clash)
      e.g. `a :: b` = `const a = b` or `a::b` (Path)
    - `#if` Polymorphism (with narrowing using if-stmts)
- Duck-Typing polymorphism `fnname<T: ~LooksLike>(T similar)`
- Error handling `int mayerror(...) !MyError`
- Moving values (Borrowck), Refrences, RAII (Destructors)
- Dead Code dectection and warnings


